version: '3.8'

services:
  # AIPAL Backend Application
  aipal-backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: aipal-backend
    ports:
      - "8000:8000"
      - "8001:8001"  # Prometheus metrics internal server
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/aipal
      - REDIS_URL=redis://redis:6379/0
      - LOG_FORMAT=json
      - LOG_LEVEL=INFO
      - ENABLE_METRICS=true
      - METRICS_PORT=8001
    depends_on:
      - postgres
      - redis
    networks:
      - aipal-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: aipal-postgres
    environment:
      - POSTGRES_DB=aipal
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - aipal-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: aipal-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - aipal-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: aipal-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - aipal-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: aipal-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - aipal-network
    restart: unless-stopped

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: aipal-jaeger
    ports:
      - "16686:16686"    # Jaeger UI
      - "14268:14268"    # Jaeger HTTP collector
      - "14250:14250"    # Jaeger gRPC collector
      - "6831:6831/udp"  # Jaeger agent (UDP Thrift)
      - "6832:6832/udp"  # Jaeger agent (UDP Binary)
      - "4317:4317"      # OTLP gRPC receiver
      - "4318:4318"      # OTLP HTTP receiver
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - JAEGER_DISABLED=false
    networks:
      - aipal-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:14269/"]
      interval: 5s
      timeout: 3s
      retries: 5

# Networks
networks:
  aipal-network:
    driver: bridge

# Volumes
volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
